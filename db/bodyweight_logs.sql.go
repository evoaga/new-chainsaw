// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: bodyweight_logs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getBodyWeightLogs = `-- name: GetBodyWeightLogs :many
SELECT id, user_id, bodyweight, log_date, created_at, updated_at
FROM bodyweight_logs
WHERE user_id = $1
ORDER BY log_date DESC
`

func (q *Queries) GetBodyWeightLogs(ctx context.Context, userID int32) ([]BodyweightLog, error) {
	rows, err := q.db.Query(ctx, getBodyWeightLogs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BodyweightLog
	for rows.Next() {
		var i BodyweightLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Bodyweight,
			&i.LogDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBodyweightLogByUserIDAndDate = `-- name: GetBodyweightLogByUserIDAndDate :one
SELECT id
FROM bodyweight_logs
WHERE user_id = $1 AND log_date = $2
`

type GetBodyweightLogByUserIDAndDateParams struct {
	UserID  int32              `json:"user_id"`
	LogDate pgtype.Timestamptz `json:"log_date"`
}

func (q *Queries) GetBodyweightLogByUserIDAndDate(ctx context.Context, arg GetBodyweightLogByUserIDAndDateParams) (int32, error) {
	row := q.db.QueryRow(ctx, getBodyweightLogByUserIDAndDate, arg.UserID, arg.LogDate)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getLatestBodyWeight = `-- name: GetLatestBodyWeight :one
SELECT bodyweight
FROM bodyweight_logs
WHERE user_id = $1
ORDER BY log_date DESC
LIMIT 1
`

func (q *Queries) GetLatestBodyWeight(ctx context.Context, userID int32) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getLatestBodyWeight, userID)
	var bodyweight pgtype.Numeric
	err := row.Scan(&bodyweight)
	return bodyweight, err
}

const logBodyWeight = `-- name: LogBodyWeight :one

INSERT INTO bodyweight_logs (user_id, bodyweight, log_date)
VALUES ($1, $2, $3)
RETURNING id
`

type LogBodyWeightParams struct {
	UserID     int32              `json:"user_id"`
	Bodyweight pgtype.Numeric     `json:"bodyweight"`
	LogDate    pgtype.Timestamptz `json:"log_date"`
}

// Body weight queries
func (q *Queries) LogBodyWeight(ctx context.Context, arg LogBodyWeightParams) (int32, error) {
	row := q.db.QueryRow(ctx, logBodyWeight, arg.UserID, arg.Bodyweight, arg.LogDate)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateBodyWeight = `-- name: UpdateBodyWeight :exec
UPDATE bodyweight_logs
SET bodyweight = $2, updated_at = NOW()
WHERE user_id = $1 AND log_date = $3
`

type UpdateBodyWeightParams struct {
	UserID     int32              `json:"user_id"`
	Bodyweight pgtype.Numeric     `json:"bodyweight"`
	LogDate    pgtype.Timestamptz `json:"log_date"`
}

func (q *Queries) UpdateBodyWeight(ctx context.Context, arg UpdateBodyWeightParams) error {
	_, err := q.db.Exec(ctx, updateBodyWeight, arg.UserID, arg.Bodyweight, arg.LogDate)
	return err
}
