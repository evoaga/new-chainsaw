// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: refresh_tokens.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAllRefreshTokensForUser = `-- name: DeleteAllRefreshTokensForUser :exec
DELETE FROM refresh_tokens WHERE user_id = $1
`

func (q *Queries) DeleteAllRefreshTokensForUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteAllRefreshTokensForUser, userID)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec

DELETE FROM refresh_tokens WHERE user_id = $1 AND token = $2
`

type DeleteRefreshTokenParams struct {
	UserID int32  `json:"user_id"`
	Token  string `json:"token"`
}

// Refresh token queries
func (q *Queries) DeleteRefreshToken(ctx context.Context, arg DeleteRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, arg.UserID, arg.Token)
	return err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one
SELECT u.id, u.username, u.email, u.name
FROM users u
         JOIN refresh_tokens rt ON u.id = rt.user_id
WHERE rt.token = $1 AND rt.expires_at > CURRENT_TIMESTAMP
`

type GetUserByRefreshTokenRow struct {
	ID       int32       `json:"id"`
	Username string      `json:"username"`
	Email    string      `json:"email"`
	Name     pgtype.Text `json:"name"`
}

func (q *Queries) GetUserByRefreshToken(ctx context.Context, token string) (GetUserByRefreshTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserByRefreshToken, token)
	var i GetUserByRefreshTokenRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const insertOrUpdateRefreshToken = `-- name: InsertOrUpdateRefreshToken :exec
INSERT INTO refresh_tokens (user_id, token, expires_at)
VALUES ($1, $2, $3)
ON CONFLICT (user_id) DO UPDATE
SET token = EXCLUDED.token, expires_at = EXCLUDED.expires_at, created_at = CURRENT_TIMESTAMP
`

type InsertOrUpdateRefreshTokenParams struct {
	UserID    int32            `json:"user_id"`
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) InsertOrUpdateRefreshToken(ctx context.Context, arg InsertOrUpdateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, insertOrUpdateRefreshToken, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const validateRefreshToken = `-- name: ValidateRefreshToken :one
SELECT u.id, u.username, u.email, u.avatar_url, u.name
FROM users u
JOIN refresh_tokens rt ON u.id = rt.user_id
WHERE rt.token = $1 AND rt.expires_at > CURRENT_TIMESTAMP
`

type ValidateRefreshTokenRow struct {
	ID        int32       `json:"id"`
	Username  string      `json:"username"`
	Email     string      `json:"email"`
	AvatarUrl pgtype.Text `json:"avatar_url"`
	Name      pgtype.Text `json:"name"`
}

func (q *Queries) ValidateRefreshToken(ctx context.Context, token string) (ValidateRefreshTokenRow, error) {
	row := q.db.QueryRow(ctx, validateRefreshToken, token)
	var i ValidateRefreshTokenRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.Name,
	)
	return i, err
}
