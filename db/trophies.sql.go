// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: trophies.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUserTrophy = `-- name: DeleteUserTrophy :exec
DELETE FROM user_trophies
WHERE user_id = $1 AND trophy_id = $2
`

type DeleteUserTrophyParams struct {
	UserID   int32 `json:"user_id"`
	TrophyID int32 `json:"trophy_id"`
}

func (q *Queries) DeleteUserTrophy(ctx context.Context, arg DeleteUserTrophyParams) error {
	_, err := q.db.Exec(ctx, deleteUserTrophy, arg.UserID, arg.TrophyID)
	return err
}

const deleteUserTrophyByOrder = `-- name: DeleteUserTrophyByOrder :exec
DELETE FROM user_trophies
WHERE user_id = $1 AND display_order = $2
`

type DeleteUserTrophyByOrderParams struct {
	UserID       int32       `json:"user_id"`
	DisplayOrder pgtype.Int4 `json:"display_order"`
}

func (q *Queries) DeleteUserTrophyByOrder(ctx context.Context, arg DeleteUserTrophyByOrderParams) error {
	_, err := q.db.Exec(ctx, deleteUserTrophyByOrder, arg.UserID, arg.DisplayOrder)
	return err
}

const getTrophyByDisplayOrder = `-- name: GetTrophyByDisplayOrder :one
SELECT t.id, t.name, t.description, ut.display_order
FROM trophies t
         JOIN user_trophies ut ON t.id = ut.trophy_id
WHERE ut.user_id = $1 AND ut.display_order = $2
`

type GetTrophyByDisplayOrderParams struct {
	UserID       int32       `json:"user_id"`
	DisplayOrder pgtype.Int4 `json:"display_order"`
}

type GetTrophyByDisplayOrderRow struct {
	ID           int32       `json:"id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
	DisplayOrder pgtype.Int4 `json:"display_order"`
}

func (q *Queries) GetTrophyByDisplayOrder(ctx context.Context, arg GetTrophyByDisplayOrderParams) (GetTrophyByDisplayOrderRow, error) {
	row := q.db.QueryRow(ctx, getTrophyByDisplayOrder, arg.UserID, arg.DisplayOrder)
	var i GetTrophyByDisplayOrderRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DisplayOrder,
	)
	return i, err
}

const getUserTrophies = `-- name: GetUserTrophies :many
SELECT t.id, t.name, t.description, ut.display_order
FROM trophies t
         JOIN user_trophies ut ON t.id = ut.trophy_id
WHERE ut.user_id = $1
ORDER BY ut.display_order, t.id
`

type GetUserTrophiesRow struct {
	ID           int32       `json:"id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
	DisplayOrder pgtype.Int4 `json:"display_order"`
}

func (q *Queries) GetUserTrophies(ctx context.Context, userID int32) ([]GetUserTrophiesRow, error) {
	rows, err := q.db.Query(ctx, getUserTrophies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTrophiesRow
	for rows.Next() {
		var i GetUserTrophiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DisplayOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserTrophy = `-- name: InsertUserTrophy :exec

INSERT INTO user_trophies (user_id, trophy_id, display_order)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, trophy_id) DO UPDATE
    SET display_order = EXCLUDED.display_order
`

type InsertUserTrophyParams struct {
	UserID       int32       `json:"user_id"`
	TrophyID     int32       `json:"trophy_id"`
	DisplayOrder pgtype.Int4 `json:"display_order"`
}

// Trophy queries
func (q *Queries) InsertUserTrophy(ctx context.Context, arg InsertUserTrophyParams) error {
	_, err := q.db.Exec(ctx, insertUserTrophy, arg.UserID, arg.TrophyID, arg.DisplayOrder)
	return err
}
